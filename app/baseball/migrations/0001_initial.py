# Generated by Django 4.2 on 2023-05-13 23:53

import baseball.models.competition_team
import baseball.models.game
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Coach',
                'verbose_name_plural': 'Coaches',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Season'), (2, 'Tournament')], default=1)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('game_rules', models.JSONField(default=dict)),
                ('innings_per_game', models.PositiveSmallIntegerField(default=9)),
            ],
            options={
                'verbose_name': 'Competition',
                'verbose_name_plural': 'Competitions',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionTeam',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('record', models.JSONField(default=dict)),
                ('competition', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='baseball.competition')),
            ],
            options={
                'verbose_name': 'Competition Team',
                'verbose_name_plural': 'Competition Teams',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('venue', models.JSONField(default=dict)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Scheduled'), (1, 'In Progress'), (2, 'Finished')], default=0)),
                ('rules', models.JSONField(default=dict)),
                ('competition', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedule', to='baseball.competition')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('draft_class', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('physicals', models.JSONField(default=dict)),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerBaserunningStats',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('games_pinch_run', models.PositiveIntegerField(default=0)),
                ('picked_off_first_base', models.PositiveIntegerField(default=0)),
                ('pickoff_attempts_first_base', models.PositiveIntegerField(default=0)),
                ('picked_off_second_base', models.PositiveIntegerField(default=0)),
                ('pickoff_attempts_second_base', models.PositiveIntegerField(default=0)),
                ('steals_second_base', models.PositiveIntegerField(default=0)),
                ('caught_stealing_second_base', models.PositiveIntegerField(default=0)),
                ('advanced_to_second_base', models.PositiveIntegerField(default=0)),
                ('thrown_out_at_second_base', models.PositiveIntegerField(default=0)),
                ('picked_off_third_base', models.PositiveIntegerField(default=0)),
                ('pickoff_attempts_third_base', models.PositiveIntegerField(default=0)),
                ('advanced_to_third_base', models.PositiveIntegerField(default=0)),
                ('thrown_out_at_third_base', models.PositiveIntegerField(default=0)),
                ('steals_third_base', models.PositiveIntegerField(default=0)),
                ('caught_stealing_third_base', models.PositiveIntegerField(default=0)),
                ('runs_scored', models.PositiveIntegerField(default=0)),
                ('thrown_out_at_home_plate', models.PositiveIntegerField(default=0)),
                ('steals_home_plate', models.PositiveIntegerField(default=0)),
                ('caught_stealing_home_plate', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Player Baserunning Stats',
                'verbose_name_plural': 'Player Baserunning Stats',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerBattingStats',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Player Batting Stats',
                'verbose_name_plural': 'Player Batting Stats',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerFieldingStats',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Player Fielding Stats',
                'verbose_name_plural': 'Player Fielding Stats',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerPitchingStats',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('complete_games', models.PositiveIntegerField(default=0)),
                ('shutouts', models.PositiveIntegerField(default=0)),
                ('holds', models.PositiveIntegerField(default=0)),
                ('saves', models.PositiveIntegerField(default=0)),
                ('save_opportunities', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Player Pitching Stats',
                'verbose_name_plural': 'Player Pitching Stats',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='TeamPlayer',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('jersey_number', models.PositiveSmallIntegerField(null=True, validators=[baseball.models.competition_team.validate_team_jersey_number])),
                ('joined_team', models.DateTimeField(blank=True, null=True)),
                ('left_team', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
                ('baserunning_stats', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_player', to='baseball.playerbaserunningstats')),
                ('batting_stats', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_player', to='baseball.playerbattingstats')),
                ('competition_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roster', to='baseball.competitionteam')),
                ('fielding_stats', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_player', to='baseball.playerfieldingstats')),
                ('pitching_stats', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_player', to='baseball.playerpitchingstats')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stats_by_team', to='baseball.player')),
            ],
            options={
                'verbose_name': 'Player Stats (Team)',
                'verbose_name_plural': 'Player Stats (Team)',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='TeamCoach',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('jersey_number', models.PositiveSmallIntegerField(null=True, validators=[baseball.models.competition_team.validate_team_jersey_number])),
                ('record', models.JSONField(blank=True, default=dict, null=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Coach'), (1, 'Manager'), (2, 'Assistant Coach')], default=0)),
                ('joined_team', models.DateTimeField(blank=True, null=True)),
                ('left_team', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
                ('coach', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stats_by_team', to='baseball.coach')),
                ('competition_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coaching_staff', to='baseball.competitionteam')),
            ],
            options={
                'verbose_name': 'Coach Stats (Team)',
                'verbose_name_plural': 'Coach Stats (Team)',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='TeamBoxScore',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('score_by_inning', models.JSONField(default=dict)),
                ('batting_stats', models.JSONField(default=dict)),
                ('fielding_stats', models.JSONField(default=dict)),
                ('pitching_stats', models.JSONField(default=dict)),
                ('baserunning_stats', models.JSONField(default=dict)),
                ('is_home_team', models.BooleanField(default=False)),
                ('competition_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games', to='baseball.competitionteam')),
                ('game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='baseball.game', validators=[baseball.models.game.limit_teams])),
            ],
            options={
                'verbose_name': 'Box Score',
                'verbose_name_plural': 'Box Scores',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='baseball.organization')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerPitchingStatsByRole',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'SP'), (1, 'RP')])),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('no_decisions', models.PositiveIntegerField(default=0)),
                ('games_pitched', models.PositiveIntegerField(default=0)),
                ('games_finished', models.PositiveIntegerField(default=0)),
                ('runs', models.PositiveIntegerField(default=0)),
                ('earned_runs', models.PositiveIntegerField(default=0)),
                ('balks', models.PositiveIntegerField(default=0)),
                ('wild_pitches', models.PositiveIntegerField(default=0)),
                ('outs_pitched', models.PositiveIntegerField(default=0)),
                ('strikes_thrown_vs_right', models.PositiveIntegerField(default=0)),
                ('strikes_thrown_vs_left', models.PositiveIntegerField(default=0)),
                ('balls_thrown_vs_right', models.PositiveIntegerField(default=0)),
                ('balls_thrown_vs_left', models.PositiveIntegerField(default=0)),
                ('batters_faced_vs_right', models.PositiveIntegerField(default=0)),
                ('batters_faced_vs_left', models.PositiveIntegerField(default=0)),
                ('singles_allowed_vs_right', models.PositiveIntegerField(default=0)),
                ('singles_allowed_vs_left', models.PositiveIntegerField(default=0)),
                ('doubles_allowed_vs_right', models.PositiveIntegerField(default=0)),
                ('doubles_allowed_vs_left', models.PositiveIntegerField(default=0)),
                ('triples_allowed_vs_right', models.PositiveIntegerField(default=0)),
                ('triples_allowed_vs_left', models.PositiveIntegerField(default=0)),
                ('home_runs_allowed_vs_right', models.PositiveIntegerField(default=0)),
                ('home_runs_allowed_vs_left', models.PositiveIntegerField(default=0)),
                ('walks_vs_right', models.PositiveIntegerField(default=0)),
                ('walks_vs_left', models.PositiveIntegerField(default=0)),
                ('intentional_walks_vs_right', models.PositiveIntegerField(default=0)),
                ('intentional_walks_vs_left', models.PositiveIntegerField(default=0)),
                ('hit_by_pitch_vs_right', models.PositiveIntegerField(default=0)),
                ('hit_by_pitch_vs_left', models.PositiveIntegerField(default=0)),
                ('strikeouts_swinging_vs_right', models.PositiveIntegerField(default=0)),
                ('strikeouts_swinging_vs_left', models.PositiveIntegerField(default=0)),
                ('strikeouts_looking_vs_right', models.PositiveIntegerField(default=0)),
                ('strikeouts_looking_vs_left', models.PositiveIntegerField(default=0)),
                ('ground_outs_forced_vs_right', models.PositiveIntegerField(default=0)),
                ('ground_outs_forced_vs_left', models.PositiveIntegerField(default=0)),
                ('line_outs_forced_vs_right', models.PositiveIntegerField(default=0)),
                ('line_outs_forced_vs_left', models.PositiveIntegerField(default=0)),
                ('fly_outs_forced_vs_right', models.PositiveIntegerField(default=0)),
                ('fly_outs_forced_vs_left', models.PositiveIntegerField(default=0)),
                ('pop_outs_forced_vs_right', models.PositiveIntegerField(default=0)),
                ('pop_outs_forced_vs_left', models.PositiveIntegerField(default=0)),
                ('pitching_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats_by_role', to='baseball.playerpitchingstats')),
            ],
            options={
                'verbose_name': 'Player Pitching Stats by Role',
                'verbose_name_plural': 'Player Pitching Stats by Role',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerGameStats',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batting', models.JSONField(default=dict)),
                ('fielding', models.JSONField(default=dict)),
                ('pitching', models.JSONField(default=dict)),
                ('baserunning', models.JSONField(default=dict)),
                ('game_box_score', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lineup', to='baseball.teamboxscore')),
                ('team_player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stats_by_game', to='baseball.teamplayer')),
            ],
            options={
                'verbose_name': 'Player Game Stats',
                'verbose_name_plural': 'Player Game Stats',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerFieldingStatsByPosition',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('position', models.PositiveSmallIntegerField(choices=[(1, 'P'), (2, 'C'), (3, '1B'), (4, '2B'), (5, '3B'), (6, 'SS'), (7, 'LF'), (8, 'CF'), (9, 'RF')])),
                ('games_started', models.PositiveIntegerField(default=0)),
                ('games_subbed_in', models.PositiveIntegerField(default=0)),
                ('games_finished', models.PositiveIntegerField(default=0)),
                ('complete_games', models.PositiveIntegerField(default=0)),
                ('putouts', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('fielding_errors', models.PositiveIntegerField(default=0)),
                ('throwing_errors', models.PositiveIntegerField(default=0)),
                ('outs_played', models.PositiveIntegerField(default=0)),
                ('double_plays', models.PositiveIntegerField(default=0)),
                ('passed_balls', models.PositiveIntegerField(default=0)),
                ('pickoffs_first_base', models.PositiveIntegerField(default=0)),
                ('pickoff_attempts_first_base', models.PositiveIntegerField(default=0)),
                ('pickoffs_second_base', models.PositiveIntegerField(default=0)),
                ('pickoff_attempts_second_base', models.PositiveIntegerField(default=0)),
                ('steals_against_second_base', models.PositiveIntegerField(default=0)),
                ('caught_stealing_second_base', models.PositiveIntegerField(default=0)),
                ('pickoffs_third_base', models.PositiveIntegerField(default=0)),
                ('pickoff_attempts_third_base', models.PositiveIntegerField(default=0)),
                ('steals_against_third_base', models.PositiveIntegerField(default=0)),
                ('caught_stealing_third_base', models.PositiveIntegerField(default=0)),
                ('steals_against_home_plate', models.PositiveIntegerField(default=0)),
                ('caught_stealing_home_plate', models.PositiveIntegerField(default=0)),
                ('fielding_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats_by_position', to='baseball.playerfieldingstats')),
            ],
            options={
                'verbose_name': 'Player Fielding Stats by Position',
                'verbose_name_plural': 'Player Fielding Stats by Position',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='PlayerBattingStatsByLineupSpot',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('lineup_spot', models.PositiveSmallIntegerField()),
                ('games_started', models.PositiveIntegerField(default=0)),
                ('games_pinch_hit', models.PositiveIntegerField(default=0)),
                ('games_finished', models.PositiveIntegerField(default=0)),
                ('complete_games', models.PositiveIntegerField(default=0)),
                ('singles_vs_right', models.PositiveIntegerField(default=0)),
                ('singles_vs_left', models.PositiveIntegerField(default=0)),
                ('doubles_vs_right', models.PositiveIntegerField(default=0)),
                ('doubles_vs_left', models.PositiveIntegerField(default=0)),
                ('triples_vs_right', models.PositiveIntegerField(default=0)),
                ('triples_vs_left', models.PositiveIntegerField(default=0)),
                ('home_runs_vs_right', models.PositiveIntegerField(default=0)),
                ('home_runs_vs_left', models.PositiveIntegerField(default=0)),
                ('runs_batted_in_vs_right', models.PositiveIntegerField(default=0)),
                ('runs_batted_in_vs_left', models.PositiveIntegerField(default=0)),
                ('walks_vs_right', models.PositiveIntegerField(default=0)),
                ('walks_vs_left', models.PositiveIntegerField(default=0)),
                ('intentional_walks_vs_right', models.PositiveIntegerField(default=0)),
                ('intentional_walks_vs_left', models.PositiveIntegerField(default=0)),
                ('hit_by_pitch_vs_right', models.PositiveIntegerField(default=0)),
                ('hit_by_pitch_vs_left', models.PositiveIntegerField(default=0)),
                ('sac_bunts_vs_right', models.PositiveIntegerField(default=0)),
                ('sac_bunts_vs_left', models.PositiveIntegerField(default=0)),
                ('sac_hits_vs_right', models.PositiveIntegerField(default=0)),
                ('sac_hits_vs_left', models.PositiveIntegerField(default=0)),
                ('sac_flies_vs_right', models.PositiveIntegerField(default=0)),
                ('sac_flies_vs_left', models.PositiveIntegerField(default=0)),
                ('fielders_choice_vs_right', models.PositiveIntegerField(default=0)),
                ('fielders_choice_vs_left', models.PositiveIntegerField(default=0)),
                ('ground_outs_vs_right', models.PositiveIntegerField(default=0)),
                ('ground_outs_vs_left', models.PositiveIntegerField(default=0)),
                ('line_outs_vs_right', models.PositiveIntegerField(default=0)),
                ('line_outs_vs_left', models.PositiveIntegerField(default=0)),
                ('fly_outs_vs_right', models.PositiveIntegerField(default=0)),
                ('fly_outs_vs_left', models.PositiveIntegerField(default=0)),
                ('pop_outs_vs_right', models.PositiveIntegerField(default=0)),
                ('pop_outs_vs_left', models.PositiveIntegerField(default=0)),
                ('strikeouts_swinging_vs_right', models.PositiveIntegerField(default=0)),
                ('strikeouts_swinging_vs_left', models.PositiveIntegerField(default=0)),
                ('strikeouts_looking_vs_right', models.PositiveIntegerField(default=0)),
                ('strikeouts_looking_vs_left', models.PositiveIntegerField(default=0)),
                ('double_plays_vs_right', models.PositiveIntegerField(default=0)),
                ('double_plays_vs_left', models.PositiveIntegerField(default=0)),
                ('batting_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats_by_lineup_spot', to='baseball.playerbattingstats')),
            ],
            options={
                'verbose_name': 'Player Batting Stats by Lineup Spot',
                'verbose_name_plural': 'Player Batting Stats by Lineup Spot',
                'ordering': ['created'],
            },
        ),
        migrations.AddField(
            model_name='competitionteam',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='competition_teams', to='baseball.team'),
        ),
        migrations.AddField(
            model_name='competition',
            name='organizer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='competitions', to='baseball.organization'),
        ),
    ]
